/*
 * File: app/view/MyWindow.js
 * 
 * This file was generated by Sencha Architect version 2.2.0.
 * http://www.sencha.com/products/architect/
 * 
 * This file requires use of the Ext JS 4.2.x library, under independent
 * license. License of Sencha Architect does not include license for Ext JS
 * 4.2.x. For more details see http://www.sencha.com/license or contact
 * license@sencha.com.
 * 
 * This file will be auto-generated each and everytime you save your project.
 * 
 * Do NOT hand edit this file.
 */
Ext.define('WorkLoadHighCharts', {
	extend : 'Ext.window.Window',
	width : 960,
	height : 720,
	modal : true,
	border : 'layout',
	title : '负荷工艺设定',
	// 数据存放中心
	dataInfo : null,
	// 基于DOM元素
	domId : null,
	// 选择制成图标的格式
	sIndex : null,
	// 初始化JSON
	initComponent : function() {
		var self = this;

		Ext.applyIf(self, {
			html : '<div id="' + self.domId + '" style="width：auto;height:100%; margin: 0 auto"></div>',
			tbar : [ {
				text : '部门实时负荷',
				handler : function() {
					self.initHtml(self.domId, 1, true);
				}
			}, '-', {
				text : '本月机台负荷',
				handler : function() {
					self.initHtml(self.domId, 0, true);
				}
			}, '-', {
				text : '年度机台负荷',
				handler : function() {
					self.initHtml(self.domId, 2, true);
				}
			}, '-', {
				text : '周计划负荷',
				handler : function() {
					// self.initHtml(self.domId, self.dataInfo);
				}
			}, '-', {
				text : '全部计划负荷',
				handler : function() {
					// self.initHtml(self.domId, self.dataInfo);
				}
			}, '->', {
				text : '设置有效工艺',
				handler : function() {
					new ModuleScheduleCrafts().show();
				}
			}, '-', {
				text : '设置查询部门',
				handler : function() {
					new RegionDepartmentClassify().show();
				}
			} ],
			listeners : {
				resize : function() {
					self.initHtml(self.domId, self.sIndex, false);
				},
				move : function() {
					self.initHtml(self.domId, self.sIndex, false);
				}
			}
		});

		self.callParent(arguments);

		self.initHtml(self.domId, 1, true);
	},
	initCharts : function(domid, index, data) {
		var options = null;

		if (index == 0) {
			var artifact = [];

			for ( var key in data) {
				var m_data = [];
				var m_craft = data[key];

				for ( var dt in m_craft.datelist) {
					var d_craft = m_craft.datelist[dt];

					var s_date = d_craft.starttime.split('-');
					var e_date = Date.UTC(parseInt(s_date[0]), parseInt(s_date[1]), parseInt(s_date[2]));

					m_data.push({
						name : MathRound(d_craft.macload, 1, 0),
						x : e_date,
						y : MathRound(d_craft.evaluate, 1, 0)
					});
				}

				m_data.sort(function(a, b) {
					return a.x > b.x;
				});

				artifact.push({
					name : m_craft.craftname,
					data : m_data
				});
			}

			options = {
				chart : {
					type : 'spline'
				},
				title : {
					text : '各工序未来10日预计负荷量(小时)'
				},
				subtitle : {
					text : '来自最强大的HMMS'
				},
				xAxis : {
					type : 'datetime',
					labels : {
						step : 1,
						formatter : function() {
							return Highcharts.dateFormat('%m-%d', this.value);
						}
					},
					title : {
						text : 'Date'
					}
				},
				yAxis : {
					title : {
						text : '每日预计零件加工负荷(小时)'
					},
					// max : 10, // 定义Y轴 最大值
					min : 0, // 定义最小值
				// tickInterval : 2
				// 刻度值
				},
				tooltip : {
					headerFormat : '<b>{series.name}</b><br>',
					pointFormat : '{point.x:%m. %d} : <b>{point.y:.2f} | <font-color = red>{point.name:.2f}</font></b> H'
				},

				exporting : {
					enabled : false
				},

				plotOptions : {
					spline : {
						dataLabels : {
							enabled : true
						},
					// enableMouseTracking : false
					}
				},

				series : artifact
			};
		} else if (index == 1) {
			var total = 0, start = 0, stop = 0, region = [], per = [], tcount = [], scount = [];
			for ( var key in data) {

				var unitCell = data[key];
				var totalCnt = parseFloat(unitCell.totalCount);
				var startCnt = parseFloat(unitCell.startCount);

				region.push(key);

				total += (parseInt(totalCnt));
				start += (parseInt(startCnt));
				stop += (parseInt(unitCell.stopCount));

				var percent = MathRound(!totalCnt ? 0 : startCnt / totalCnt * 100, 1, 0);

				tcount.push(totalCnt);
				scount.push(startCnt);
				per.push([ percent ]);
			}

			var totalPer = MathRound(!total ? 0 : start / total * 100, 1, 0);

			options = {
				title : {
					text : '当前机台部门总负荷(' + totalPer + '%)'
				},
				subtitle : {
					text : '来自强大的HMMS'
				},
				xAxis : {
					categories : region
				},
				yAxis : [ {
					title : {
						text : '机台数量(台)'
					}
				}, {
					title : {
						text : '机台稼动百分比(%)'
					},
					opposite : true,
					labels : {
						format : '{value}%'
					}
				} ],
				plotOptions : {
					spline : {
						dataLabels : {
							enabled : true
						}
					// ,enableMouseTracking : false
					},
					column : {
						dataLabels : {
							enabled : true
						}
					// ,enableMouseTracking : false
					}
				},
				exporting : {
					enabled : false
				},
				series : [ {
					name : '机台数量',
					type : 'column',
					data : tcount

				}, {
					name : '开机数量',
					type : 'column',
					data : scount

				}, {
					type : 'spline',
					name : '工艺百分比',
					dataLabels : {
						enabled : true,
						format : '{y}%'
					},
					yAxis : 1,
					data : per
				} ]
			};
		} else {

		}

		$('#' + domid).highcharts(options);
	},
	initLoadMask : function(root, info) {
		return new Ext.LoadMask(root, {
			msg : info,
			removeMask : true
		});
	},
	initHtml : function(domid, index, init) {
		var root = this;
		// 设置机台负荷情况
		root.sIndex = index;
		// 用于存放工艺查询行
		var dataRef = null;

		if (index == 0) {
			if (init) {
				var mask = root.initLoadMask(root, '信息加载中，请稍后...');
				mask.show();
				Ext.Ajax.request({
					url : 'public/getArtifactEstWorkLoad',
					// async : false,
					method : 'POST',
					params : {
						classid : 1,
						day : 10,
						isall : false,
						dayhour : 24,
						fstateid : '[ "20209", "20210" ]',
						doall : '11216',
						astateid : '20201'
					},
					success : function(resp) {
						dataRef = Ext.JSON.decode(resp.responseText);
						// 设置根数据缓冲区
						root.dataInfo = dataRef;
						mask.hide();
						root.initCharts(domid, index, dataRef);
					},
					failure : function(x, y, z) {
						mask.hide();

						showError('加载零件负荷失败!');
						return;
					}
				});
			} else {
				dataRef = root.dataInfo;
				root.initCharts(domid, index, dataRef);
			}

		} else if (index == 1) {
			if (init) {
				Ext.Ajax.request({
					url : 'public/getCurrentMahineWorkLoad',
					async : false,
					method : 'POST',
					params : {
						classid : 0,
						typeid : 'regionid',
						typename : 'regionname',
						stateid : '20101'
					},
					success : function(resp) {
						dataRef = Ext.JSON.decode(resp.responseText);
						// 设置根数据缓冲区
						root.dataInfo = dataRef;
						root.initCharts(domid, index, dataRef);
					},
					failure : function(x, y, z) {
						showError('加载机台负荷失败!');
						return;
					}
				});
			} else {
				dataRef = root.dataInfo;
				root.initCharts(domid, index, dataRef);
			}
		} else {
			if (init) {
				Ext.Ajax.request({
					url : 'module/report/machineLoadOfDept',
					async : false,
					method : 'POST',
					params : {
						"workForm.classId" : 0,
						"workForm.collectType" : 1,
						"workForm.startTime" : '2016-01-01',
						"workForm.endTime" : '2016-12-31'
					},
					success : function(resp) {
						dataRef = Ext.JSON.decode(resp.responseText);
						// 设置根数据缓冲区
						root.dataInfo = dataRef;
						console.info(dataRef);
					},
					failure : function(x, y, z) {
						showError('加载机台负荷失败!');
						return;
					}
				});
			} else {
				dataRef = root.dataInfo;
			}

			var artifact = [];

			for ( var key in dataRef) {
				var m_data = [];
				var m_craft = dataRef[key];

				for ( var dt in m_craft.datelist) {
					var d_craft = m_craft.datelist[dt];

					var s_date = d_craft.starttime.split('-');
					var e_date = Date.UTC(parseInt(s_date[0]), parseInt(s_date[1]), parseInt(s_date[2]));

					m_data.push({
						name : MathRound(d_craft.macload, 1, 0),
						x : e_date,
						y : MathRound(d_craft.evaluate, 1, 0)
					});
				}

				m_data.sort(function(a, b) {
					return a.x > b.x;
				});

				artifact.push({
					name : m_craft.craftname,
					data : m_data
				});
			}

			options = {
				chart : {
					type : 'spline'
				},
				title : {
					text : '各工序未来10日预计负荷量(小时)'
				},
				subtitle : {
					text : '来自最强大的HMMS'
				},
				xAxis : {
					type : 'datetime',
					labels : {
						step : 1,
						formatter : function() {
							return Highcharts.dateFormat('%m-%d', this.value);
						}
					},
					title : {
						text : 'Date'
					}
				},
				yAxis : {
					title : {
						text : '每日预计零件加工负荷(小时)'
					},
					// max : 10, // 定义Y轴 最大值
					min : 0, // 定义最小值
				// tickInterval : 2
				// 刻度值
				},
				tooltip : {
					headerFormat : '<b>{series.name}</b><br>',
					pointFormat : '{point.x:%m. %d} : <b>{point.y:.2f} | <font-color = red>{point.name:.2f}</font></b> H'
				},

				exporting : {
					enabled : false
				},

				plotOptions : {
					spline : {
						dataLabels : {
							enabled : true
						},
					// enableMouseTracking : false
					}
				},

				series : artifact
			};
		}
	}
});

Ext.define('ModuleScheduleCrafts', {
	extend : 'Ext.window.Window',
	width : 280,
	height : 360,
	modal : true,
	layout : 'border',
	title : '负荷工艺设定',
	bbar : [ '->', {
		iconCls : 'gtk-save-16',
		text : '保存设定',
		handler : function() {
			var _win = this.up('window');
			// 获取要设定的工艺讯息
			var craftRows = Ext.getCmp('mpg-craft-select').getSelectionModel().getSelection();

			var craftArr = [];
			for ( var x in craftRows) {
				craftArr.push(craftRows[x].get('id'));
			}

			Ext.Ajax.request({
				url : 'module/schedule/addModuleCraftClassify?flag=1',
				params : {
					craftset : craftArr.join(',')
				},
				method : 'POST',
				success : function(res) {
					var backJson = Ext.JSON.decode(res.responseText);
					if (backJson.success) {
						_win.close();
					} else {
						showError(backJson.msg);
					}
				},
				failure : function(x, y, z) {
					showError('连接服务器失败,请重新登录!');
				}
			});
		}
	} ],
	initComponent : function() {
		var self = this;
		self.items = [ {
			id : 'mpg-craft-select',
			xtype : 'gridpanel',
			region : 'center',
			forceFit : true,
			border : false,
			selModel : {
				mode : "SIMPLE",
				// checkOnly : true,
				selType : "checkboxmodel"
			},
			columns : [ {
				dataIndex : 'craftname',
				text : '加工工艺',
				renderer : function(val, meta, record) {
					var _craftcode = record.get('craftcode');
					return val ? ('<b>' + val + (_craftcode ? ('[' + _craftcode + ']') : '') + '</b>') : val;
				}
			} ],
			store : Ext.create('Ext.data.Store', {
				fields : [ 'id', 'craftname', 'mccid', 'craftcode', 'checked' ],
				autoLoad : true,
				proxy : {
					url : 'public/getScheduleCrafts?classid=1',
					type : 'ajax',
					reader : {
						type : 'json'
					}
				},
				listeners : {
					load : function(store, records) {
						var selGrid = Ext.getCmp('mpg-craft-select');
						var estSelRow = [];
						if (records && records.length) {
							for ( var x in records) {
								if (records[x].get('checked')) {
									estSelRow.push(records[x]);
								}
							}

							if (estSelRow.length) {
								selGrid.getSelectionModel().select(estSelRow);
							}
						}
					}
				}
			})
		} ];
		self.callParent(arguments);
	}
});

Ext.define('RegionDepartmentClassify', {
	extend : 'Ext.window.Window',
	width : 280,
	height : 360,
	modal : true,
	layout : 'border',
	title : '统计部门设定',
	bbar : [ '->', {
		iconCls : 'gtk-save-16',
		text : '保存设定',
		handler : function() {
			var _win = this.up('window');
			// 获取要设定的工艺讯息
			var regionRows = Ext.getCmp('mpg-region-select').getSelectionModel().getSelection();

			var regionArr = [];
			for ( var x in regionRows) {
				regionArr.push(regionRows[x].get('id'));
			}

			Ext.Ajax.request({
				url : 'module/base/addRegionDepartmentClassify?flag=0',
				params : {
					regionset : regionArr.join(',')
				},
				method : 'POST',
				success : function(res) {
					var backJson = Ext.JSON.decode(res.responseText);
					if (backJson.success) {
						_win.close();
					} else {
						showError(backJson.msg);
					}
				},
				failure : function(x, y, z) {
					showError('连接服务器失败,请重新登录!');
				}
			});
		}
	} ],
	initComponent : function() {
		var self = this;
		self.items = [ {
			id : 'mpg-region-select',
			xtype : 'gridpanel',
			region : 'center',
			forceFit : true,
			border : false,
			selModel : {
				mode : "SIMPLE",
				// checkOnly : true,
				selType : "checkboxmodel"
			},
			columns : [ {
				dataIndex : 'regionname',
				text : '部门名称',
				renderer : function(val, meta, record) {
					return val ? ('<b>' + val + '</b>') : val;
				}
			} ],
			store : Ext.create('Ext.data.Store', {
				fields : [ 'id', 'regionname', 'stepid', 'rdcid', 'checked' ],
				autoLoad : true,
				proxy : {
					url : 'public/getAvaliableRegion?classid=0&isava=0',
					type : 'ajax',
					reader : {
						type : 'json'
					}
				},
				listeners : {
					load : function(store, records) {
						var selGrid = Ext.getCmp('mpg-region-select');
						var estSelRow = [];
						if (records && records.length) {
							for ( var x in records) {
								if (records[x].get('checked')) {
									estSelRow.push(records[x]);
								}
							}

							if (estSelRow.length) {
								selGrid.getSelectionModel().select(estSelRow);
							}
						}
					}
				}
			})
		} ];
		self.callParent(arguments);
	}
});

Ext.define('EmployeeEfficiency', {
	extend : 'Ext.window.Window',

	height : 750,
	width : 1120,
	layout : {
		type : 'border'
	},

	bodyPadding : 2,
	title : '员工加工明细',
	iconCls : 'group_gear-16',
	modal : true,

	tbar : [ {
		id : 'ee-region-part',
		xtype : 'combobox',
		width : 180,
		fieldLabel : '<b>选择部门</b>',
		editable : false,
		labelWidth : 65,
		margin : '0 5',
		displayField : 'name',
		valueField : 'stepid',
		store : Ext.create('Ext.data.Store', {
			fields : [ 'partid', 'name', 'stepid' ],
			autoLoad : true,
			proxy : {
				url : 'public/getEmployeeRegionDepart',
				type : 'ajax',
				reader : {
					root : 'department',
					type : 'json'
				}
			}
		}),
		listeners : {
			select : function(combo) {
				Ext.getStore('ee-employee-store').load({
					url : 'public/getRegionEmployeeInfoByStepid',
					params : {
						stepid : combo.getValue()
					}
				});
			}
		}
	}, {
		id : 'ee-start-date',
		xtype : 'datefield',
		fieldLabel : '<b>开始日期</b>',
		editable : false,
		labelWidth : 65,
		format : 'Y-m-d',
		margin : '0 5'
	}, {
		id : 'ee-end-date',
		xtype : 'datefield',
		fieldLabel : '<b>结束日期</b>',
		editable : false,
		labelWidth : 65,
		format : 'Y-m-d',
		margin : '0 5'
	}, '->', {
		id : 'ee-chk-month',
		xtype : 'checkbox',
		boxLabel : '月度统计',
		listeners : {
			change : function(chk, newValue, oldValue, eOpts) {
				Ext.getCmp('ee-end-date').setVisible(!newValue);
			}
		}
	} ],
	getComboRecordField : function(combo, qfield) {
		var selValue = combo.getValue();
		var selRow = combo.findRecordByValue(selValue);
		if (selRow) {
			return selRow.get(qfield);
		}

		return (null);
	},
	initComponent : function() {
		var me = this;

		Ext.applyIf(me, {
			items : [
					{
						xtype : 'gridpanel',
						region : 'west',
						split : true,
						width : 250,
						store : Ext.create('Ext.data.Store', {
							id : 'ee-employee-store',
							fields : [ 'id', 'worknumber', 'empname', 'regionname' ],
							autoLoad : true,
							proxy : {
								url : '',
								type : 'ajax',
								reader : {
									type : 'json'
								}
							}
						}),
						listeners : {
							itemclick : function(row, record) {
								var empid = record.get('id');
								var ismonth = Ext.getCmp('ee-chk-month').getValue();
								var startdate = Ext.Date.format(Ext.getCmp('ee-start-date').getValue(), 'Y-m-d');
								var enddate = Ext.Date.format(Ext.getCmp('ee-end-date').getValue(), 'Y-m-d');

								Ext.getStore('ee-unit-store').load({
									url : 'public/getEffientEmployee',
									params : {
										startdate : startdate,
										enddate : enddate,
										empbarcode : empid,
										states : '20209,20210',
										format : 'yyyy-mm-dd',
										ismonth : ismonth,
										stepid : null,
										istotal : false
									}
								});
							}
						},
						forceFit : true,
						columns : [ {
							text : '员工工号',
							dataIndex : 'worknumber',
							renderer : me.renderFont
						}, {
							text : '员工姓名',
							dataIndex : 'empname',
							renderer : me.renderFont
						}, {
							text : '所在部门',
							dataIndex : 'regionname',
							renderer : me.renderFont
						} ],
						title : '员工加工汇总'
					},
					{
						xtype : 'container',
						region : 'center',
						layout : {
							type : 'border'
						},
						items : [ {
							xtype : 'gridpanel',
							region : 'center',
							split : true,
							height : 300,
							title : '零件加工时长',
							tbar : [ {
								text : '全部汇总',
								iconCls : 'date-16',
								handler : function() {
									var ismonth = Ext.getCmp('ee-chk-month').getValue();
									var deptCombo = Ext.getCmp('ee-region-part');

									var stepid = me.getComboRecordField(deptCombo, 'stepid');
									// TODO ddddd
									// var stepid =
									var startdate = Ext.Date.format(Ext.getCmp('ee-start-date').getValue(), 'Y-m-d');
									var enddate = Ext.Date.format(Ext.getCmp('ee-end-date').getValue(), 'Y-m-d');

									Ext.getStore('ee-unit-store').load({
										url : 'public/getEffientEmployee',
										params : {
											startdate : startdate,
											enddate : enddate,
											empbarcode : null,
											states : '20209,20210',
											format : 'yyyy-mm-dd',
											ismonth : ismonth,
											istotal : true,
											stepid : stepid
										}
									});
								}
							}, '-', {
								text : '导出报告',
								iconCls : 'page_white_acrobat-16',
								handler : function() {
									var exportRows = this.up('gridpanel').getStore().getRange();
									var dataRow = [];
									for ( var x in exportRows) {
										dataRow.push(exportRows[x].getData());
									}

									// 是否导出零件报告
									Ext.Msg.confirm('提醒', '是否确定导出零件信息?', function(y) {
										if (y == 'yes') {
											Ext.create('Ext.form.Panel', {
												standardSubmit : true,
											}).submit({
												url : 'public/exportEmployeeEffient',
												params : {
													datarow : Ext.JSON.encode(dataRow)
												},
												success : function(form, action) {
													showSuccess("下载成功!");
												},
												failure : function(form, action) {
													switch (action.failureType) {
													case Ext.form.action.Action.CLIENT_INVALID:
														showError("提交数据出现错误!");
														break;
													case Ext.form.action.Action.CONNECT_FAILURE:
														showError("下载出现错误!");
														break;
													case Ext.form.action.Action.SERVER_INVALID:
														showError("服务器错误!");
													}
												}
											});
										}
									});

								}
							} ],
							bbar : [ {
								id : 'ee-total-text',
								text : '<b>总实际时长: 0 | 总预估时长: 0</b>',
								iconCls : 'sum-16'
							} ],
							store : Ext.create('Ext.data.Store', {
								id : 'ee-unit-store',
								fields : [ 'modulecode', 'partlistcode', 'craftid', 'craftname', 'empid', 'empname', 'esthour', 'acthour', 'allhour',
										'millhour', 'finish', 'start', 'end', 'rinfo' ],
								autoLoad : true,
								proxy : {
									url : '',
									type : 'ajax',
									reader : {
										type : 'json'
									}
								},
								listeners : {
									load : function(store, records, successful, eOpts) {
										var estSum = 0, actSum = 0, notActSum = 0;
										for ( var x in records) {
											var finish = records[x].get('finish');
											if (finish) {
												estSum += (parseFloat(records[x].get('esthour')));
												actSum += (parseFloat(records[x].get('acthour')));
											} else {
												notActSum += (parseFloat(records[x].get('acthour')));
											}
										}

										var txt = '<b>完成实际时长 : ' + MathRound(actSum, 10, 2) + ' | 完成预估时长 : ' + MathRound(estSum, 10, 2)
												+ ' | 未完成实际时长 : ' + MathRound(notActSum, 10, 2) + '</b>';

										Ext.getCmp('ee-total-text').setText(txt);
									}
								}
							}),
							columns : [ {
								text : '模具工号',
								dataIndex : 'modulecode',
								width : 130,
								renderer : me.renderFont
							}, {
								text : '履历讯息',
								dataIndex : 'rinfo',
								renderer : me.renderFont
							}, {
								text : '加工人员',
								dataIndex : 'empname',
								renderer : me.renderFont
							}, {
								text : '零件编号',
								dataIndex : 'partlistcode',
								renderer : me.renderFont
							}, {
								text : '工艺名称',
								dataIndex : 'craftname',
								renderer : me.renderFont
							}, {
								text : '开始时间',
								dataIndex : 'start',
								width : 160,
								renderer : me.renderFont
							}, {
								text : '结束时间',
								dataIndex : 'end',
								width : 160,
								renderer : me.renderFont
							}, {
								text : '实际用时(H)',
								dataIndex : 'acthour',
								renderer : me.renderFont
							}, {
								text : '全部用时(H)',
								dataIndex : 'allhour',
								renderer : me.renderFont
							}, {
								text : '预计用时(H)',
								dataIndex : 'esthour',
								renderer : me.renderFont
							}, {
								text : '安排用时(H)',
								dataIndex : 'millhour',
								renderer : me.renderFont
							}, {
								text : '是否完成',
								dataIndex : 'finish',
								width : 80,
								renderer : function(val) {
									return '<b>' + (val ? '已完成' : '<font color = red>未完成</font>') + '</b>';
								}
							} ]
						} ]
					} ]
		});

		me.callParent(arguments);
	},
	renderFont : function(val) {
		return (val ? '<b>' + val + '</b>' : val);
	}

});
/*
 * File: app/view/MyWindow.js
 * 
 * This file was generated by Sencha Architect version 2.2.0.
 * http://www.sencha.com/products/architect/
 * 
 * This file requires use of the Ext JS 4.2.x library, under independent
 * license. License of Sencha Architect does not include license for Ext JS
 * 4.2.x. For more details see http://www.sencha.com/license or contact
 * license@sencha.com.
 * 
 * This file will be auto-generated each and everytime you save your project.
 * 
 * Do NOT hand edit this file.
 */

Ext.define('ModuleResumeWindow', {
	extend : 'Ext.window.Window',

	modal : true,
	height : 600,
	width : 1000,
	layout : {
		type : 'border'
	},
	title : '模具加工明细',
	modulebarcode : null,

	initComponent : function() {
		var me = this;

		Ext.applyIf(me, {
			items : [ {
				xtype : 'gridpanel',
				region : 'center',
				border : false,
				store : Ext.create('Ext.data.Store', {
					fields : [ 'id', 'modulebarcode', 'modulecode', 'guestcode', 'statename', 'launch', 'processed', 'finishtime', 'useday',
							'installer', 'deviser', 'totalday', 'distance' ],
					proxy : {
						url : 'public/getModuleResumeAssemble?modulebarcode=' + me.modulebarcode,
						type : 'ajax',
						reader : {
							type : 'json'
						}
					},
					autoLoad : true
				}),
				columns : [ {
					xtype : 'gridcolumn',
					dataIndex : 'modulecode',
					text : '社内编号',
					renderer : function(val) {
						return val ? '<b>' + val + '</b>' : val;
					}
				}, {
					xtype : 'gridcolumn',
					dataIndex : 'guestcode',
					text : '客户番号',
					renderer : function(val) {
						return val ? '<b>' + val + '</b>' : val;
					}
				}, {
					xtype : 'gridcolumn',
					dataIndex : 'statename',
					text : '加工状态',
					width : 70,
					renderer : function(val) {
						return val ? '<b>' + val + '</b>' : val;
					}
				}, {
					xtype : 'gridcolumn',
					dataIndex : 'deviser',
					text : '设计担当',
					width : 70,
					renderer : function(val) {
						return val ? '<b>' + val + '</b>' : val;
					}
				}, {
					xtype : 'gridcolumn',
					dataIndex : 'installer',
					width : 70,
					text : '组立担当',
					renderer : function(val) {
						return val ? '<b>' + val + '</b>' : val;
					}
				}, {
					xtype : 'gridcolumn',
					dataIndex : 'launch',
					text : '实际开始',
					renderer : function(val) {
						return val ? '<b>' + val.substring(0, 10) + '</b>' : val;
					}
				}, {
					xtype : 'gridcolumn',
					dataIndex : 'processed',
					text : '加工完成',
					renderer : function(val) {
						return val ? '<b>' + val.substring(0, 10) + '</b>' : val;
					}
				}, {
					xtype : 'gridcolumn',
					dataIndex : 'finishtime',
					text : '实际完成',
					renderer : function(val) {
						return val ? '<b>' + val.substring(0, 10) + '</b>' : '<b>加工中</b>';
					}
				}, {
					xtype : 'gridcolumn',
					dataIndex : 'totalday',
					text : '总共天数',
					width : 70,
					renderer : function(val) {
						return val ? '<b>' + val + '</b>' : val;
					}
				}, {
					xtype : 'gridcolumn',
					dataIndex : 'useday',
					text : '制作天数',
					width : 70,
					renderer : function(val) {
						return val ? '<b>' + val + '</b>' : val;
					}
				}, {
					xtype : 'gridcolumn',
					dataIndex : 'distance',
					text : '距上次结束',
					width : 70,
					renderer : function(val) {
						return val ? '<b>' + MathRound(val / 3600 / 24, 2) + '</b>' : val;
					}
				} ]
			} ]
		});

		me.callParent(arguments);
	}

});
/*
 * File: app/view/MyWindow.js
 * 
 * This file was generated by Sencha Architect version 2.2.0.
 * http://www.sencha.com/products/architect/
 * 
 * This file requires use of the Ext JS 4.2.x library, under independent
 * license. License of Sencha Architect does not include license for Ext JS
 * 4.2.x. For more details see http://www.sencha.com/license or contact
 * license@sencha.com.
 * 
 * This file will be auto-generated each and everytime you save your project.
 * 
 * Do NOT hand edit this file.
 */

Ext.define('ModuleHandleSettings', {
	extend : 'Ext.window.Window',

	height : 69,
	width : 400,
	resizable : false,
	modal : true,
	layout : {
		columns : 5,
		type : 'table'
	},
	title : '模具加工设定',
	bodyPadding : 3,
	iconCls : 'cog-16',
	moduleGrid : null,

	initComponent : function() {
		var me = this;

		Ext.applyIf(me, {
			defaults : {
				padding : 4,
				margin : 2
			},
			items : [ {
				xtype : 'button',
				text : '紧急加工',
				iconCls : 'time-16',
				handler : function() {
					var _win = this.up('window');
					var _selRow = me.moduleGrid.getSelectionModel().getSelection();

					var rlist = [];
					for ( var x in _selRow) {
						rlist.push(_selRow[x].get('id'));
					}

					var resumestr = "'" + rlist.join("','") + "'";

					Ext.Ajax.request({
						url : 'module/manage/setModuleUrgent',
						params : {
							urgent : resumestr
						},
						success : function(resp) {
							var backJson = Ext.JSON.decode(resp.responseText);
							if (backJson.success) {
								_win.close();

								me.moduleGrid.getStore().reload();
								me.moduleGrid.getSelectionModel().deselectAll();
							} else {
								showError(backJson.msg ? backJson.msg : '没有选中任何要设置紧急状态的模具资料!');
							}
						},
						failure : function() {
							showError('连接服务器失败,请检查网络连接!');
							return;
						}
					});
				}
			}, {
				xtype : 'button',
				text : '停工&复工',
				iconCls : 'cog_edit-16',
				handler : function() {
					var _win = this.up('window');
					var _selRow = me.moduleGrid.getSelectionModel().getSelection();

					var rlist = [];
					for ( var x in _selRow) {
						rlist.push(_selRow[x].get('id'));
					}

					// 将模具的加工履历号合并成SQL中的IN结构字符串
					var resumestr = "'" + rlist.join("','") + "'";

					Ext.Ajax.request({
						url : 'module/manage/alertControlModuleState',
						method : 'POST',
						params : {
							resumeid : resumestr
						},
						success : function(resp) {
							var back = Ext.JSON.decode(resp.responseText);
							if (back.success) {
								_win.close();

								me.moduleGrid.getStore().reload();
								me.moduleGrid.getSelectionModel().deselectAll();
							} else {
								showError(back.msg);
							}
						},
						failure : function(x, y, z) {
							showError('连接服务器失败,请检查网络连接!');
							return;
						}
					});
				}
			}, {
				xtype : 'button',
				text : '加工完成',
				iconCls : 'clock-16',
				handler : function() {
					var _win = this.up('window');
					var _selRow = me.moduleGrid.getSelectionModel().getSelection();

					var rlist = [];
					for ( var x in _selRow) {
						rlist.push(_selRow[x].get('id'));
					}

					// 将模具的加工履历号合并成SQL中的IN结构字符串
					var resumestr = "'" + rlist.join("','") + "'";

					Ext.Ajax.request({
						url : 'module/manage/processModuleHandle',
						method : 'POST',
						params : {
							resumeid : resumestr
						},
						success : function(resp) {
							var back = Ext.JSON.decode(resp.responseText);
							if (back.success) {
								_win.close();

								me.moduleGrid.getStore().reload();
								me.moduleGrid.getSelectionModel().deselectAll();
							} else {
								showError(back.msg);
								return;
							}
						},
						failure : function(x, y, z) {
							showError('连接服务器失败,请检查网络连接!');
							return;
						}
					});
				}
			}, {
				xtype : 'button',
				text : '核准完工',
				iconCls : 'accept-16',
				handler : function() {
					var _win = this.up('window');
					var _selRow = me.moduleGrid.getSelectionModel().getSelection();
					if (_selRow.length != 1) {
						showError('不能同时完工多套模具!');
						return;
					}

					var resumestr = _selRow[0].get('id');

					Ext.Msg.confirm('确认', '是否决定将该模具完工?', function(y) {
						if (y == 'yes') {
							Ext.Ajax.request({
								url : 'module/manage/proceedModuleFinish',
								method : 'POST',
								params : {
									resumeid : resumestr
								},
								success : function(resp) {
									var back = Ext.JSON.decode(resp.responseText);
									if (back.success) {
										_win.close();

										me.moduleGrid.getStore().reload();
										me.moduleGrid.getSelectionModel().deselectAll();
									} else {
										showError(back.msg);
										return;
									}
								},
								failure : function(x, y, z) {
									showError('连接服务器失败,请检查网络连接!');
									return;
								}
							});
						}
					});
				}
			} ]
		});

		me.callParent(arguments);
	}

});
Ext.define('MachineSituationWindow', {
	extend : 'Ext.window.Window',

	height : 611,
	width : 854,
	modal : true,
	layout : {
		type : 'border'
	},
	title : '机台稼动情况',
	timeHandle : null,
	listeners : {
		destroy : function(win, eOpts) {
			if (win.timeHandle) {
				window.clearInterval(win.timeHandle);
			}
		}
	},
	tbar : [ '->', {
		id : 'mpg-depart-select',
		xtype : 'combobox',
		fieldLabel : '选择部门',
		labelWidth : 65,
		editable : false,
		width : 180,
		displayField : 'name',
		valueField : 'id',
		value : '',
		store : Ext.data.Store({
			fields : [ 'id', 'name', 'stepid' ],
			autoLoad : true,
			proxy : {
				url : 'public/getRootRegion',
				type : 'ajax',
				reader : {
					type : 'json'
				}
			}
		}),
		listeners : {
			select : function(combo, record) {
				var self = this.up('window');
				var sel = combo.getValue();
				self.refreshMachine(sel);
			}
		}
	}, '-', {
		xtype : 'checkbox',
		boxLabel : '定时刷新',
		listeners : {
			change : function(chk, newValue, oldValue) {
				var self = this.up('window');
				if (newValue) {
					self.timeHandle = window.setInterval(self.timerRefresh, 5000);
				} else {
					window.clearInterval(self.timeHandle);
					self.timeHandle = null;
				}
			}
		}
	} ],

	initComponent : function() {
		var me = this;

		Ext.applyIf(me, {
			items : [ {
				xtype : 'container',
				region : 'center',
				layout : {
					type : 'border'
				},
				defaults : {
					padding : 3
				},
				items : [
						{
							xtype : 'container',
							region : 'west',
							width : 400,
							layout : {
								type : 'border'
							},
							defaults : {
								padding : 3
							},
							items : [
									{
										xtype : 'chart',
										animate : true,
										region : 'north',
										height : 200,
										shadow : true,
										store : Ext.create('Ext.data.JsonStore', {
											id : 'machine-state-store',
											fields : [ 'stateid', 'name', 'scount' ],
											autoLoad : true,
											proxy : {
												url : 'public/getMachineWorkRate',
												type : 'ajax',
												reader : {
													type : 'json'
												}
											}
										}),
										legend : {
											position : 'right'
										},
										insetPadding : 30,
										theme : 'Base:gradients',
										series : [ {
											type : 'pie',
											field : 'scount',
											showInLegend : true,
											tips : {
												trackMouse : true,
												width : 120,
												height : 50,
												renderer : function(storeItem, item) {
													// calculate percentage.
													var total = 0;

													var store = Ext.getStore('machine-state-store');
													store.each(function(rec) {
														total += rec.get('scount');
													});

													this.setTitle(storeItem.get('name') + '率: ' + Math.round(storeItem.get('scount') / total * 100)
															+ '%' + '<br>机台数量：' + storeItem.get('scount'));
												}
											},
											highlight : {
												segment : {
													margin : 20
												}
											},
											label : {
												field : 'name',
												display : 'rotate',
												contrast : true,
												font : '10px Arial'
											}
										} ]
									}, Ext.create('Ext.chart.Chart', {
										animate : true,
										shadow : true,
										region : 'center',
										store : Ext.create('Ext.data.JsonStore', {
											id : 'machine-craft-store',
											fields : [ 'craftname', 'launch', 'stop' ],
											autoLoad : true,
											proxy : {
												url : 'public/getMachineCraftInfo',
												type : 'ajax',
												reader : {
													type : 'json'
												}
											}
										}),
										legend : {
											position : 'right'
										},
										axes : [ {
											type : 'Numeric',
											position : 'bottom',
											fields : [ 'launch', 'stop' ],
											title : false,
											grid : true
										}, {
											type : 'Category',
											position : 'left',
											fields : [ 'craftname' ],
											title : false
										} ],
										series : [ {
											type : 'bar',
											axis : 'bottom',
											gutter : 80,
											xField : 'craftname',
											yField : [ 'launch', 'stop' ],
											stacked : true,
											tips : {
												trackMouse : true,
												width : 140,
												height : 28,
												renderer : function(storeItem, item) {
													this.setTitle('机台数量：' + String(item.value[1]));
												}
											}
										} ]
									}) ]
						}, {
							xtype : 'container',
							region : 'center',
							width : 400,
							layout : {
								type : 'border'
							},
							defaults : {
								padding : 3
							},
							items : [ {
								xtype : 'gridpanel',
								region : 'north',
								height : 400,
								columnLines : true,
								listeners : {
									itemclick : function(grid, record) {
										Ext.getStore('mpg-workpart-store').load({
											params : {
												departid : record.get('id')
											}
										});
									}
								},
								store : new Ext.data.Store({
									id : 'machine-detail-store',
									fields : [ 'id', 'deviceid', 'deptname', 'batchno', 'statename', 'acthour', 'empname' ],
									autoLoad : true,
									proxy : {
										url : 'public/getMachineWorkDetails',
										type : 'ajax',
										reader : {
											type : 'json'
										}
									}
								}),
								title : '机台明细',
								columns : [ {
									xtype : 'gridcolumn',
									dataIndex : 'deptname',
									text : '机台部门',
									renderer : me.renderFont,
									width : 80
								}, {
									xtype : 'gridcolumn',
									dataIndex : 'batchno',
									text : '机台编号',
									renderer : me.renderFont,
									width : 80
								}, {
									xtype : 'gridcolumn',
									dataIndex : 'statename',
									text : '机台状态',
									renderer : me.renderFont,
									width : 80
								}, {
									xtype : 'gridcolumn',
									dataIndex : 'empname',
									text : '操作人员',
									renderer : me.renderFont,
									width : 80
								}, {
									xtype : 'gridcolumn',
									dataIndex : 'acthour',
									text : '开机时长',
									renderer : me.renderFont,
									width : 80
								} ]
							}, {
								xtype : 'gridpanel',
								title : '机台零件讯息',
								split : true,
								region : 'center',
								store : Ext.create('Ext.data.Store', {
									id : 'mpg-workpart-store',
									fields : [ 'modulecode', 'guestcode', 'resumestate', 'partlistcode', 'guestname' ],
									autoLoad : true,
									proxy : {
										url : 'public/getMachineWorkPartDetails',
										type : 'ajax',
										reader : {
											type : 'json'
										}
									}
								}),
								columns : [ {
									xtype : 'gridcolumn',
									dataIndex : 'modulecode',
									text : '模具工号',
									renderer : me.renderFont,
									width : 80
								}, {
									xtype : 'gridcolumn',
									dataIndex : 'guestcode',
									text : '客户代号',
									height : 32,
									renderer : me.renderFont,
									width : 80
								}, {
									xtype : 'gridcolumn',
									dataIndex : 'guestname',
									text : '客户名称',
									renderer : me.renderFont,
									width : 80
								}, {
									xtype : 'gridcolumn',
									dataIndex : 'resumestate',
									text : '加工类型',
									renderer : me.renderFont,
									width : 80
								}, {
									xtype : 'gridcolumn',
									dataIndex : 'partlistcode',
									text : '零件编号',
									renderer : me.renderFont,
									width : 80
								} ]
							} ]
						} ]
			} ]
		});

		me.callParent(arguments);
	},
	renderFont : function(val) {
		return (val ? '<b>' + val + '</b>' : val);
	},
	refreshMachine : function(val) {
		var store1 = Ext.getStore('machine-state-store');
		var store2 = Ext.getStore('machine-craft-store');
		var store3 = Ext.getStore('machine-detail-store');

		store1.load({
			params : {
				deptid : val
			}
		});
		store2.load({
			params : {
				deptid : val
			}
		});
		store3.load({
			params : {
				deptid : val
			}
		});
	},
	/**
	 * 定时刷新
	 */
	timerRefresh : function() {
		var kValue = Ext.getCmp('mpg-depart-select').getValue();

		var store1 = Ext.getStore('machine-state-store');
		var store2 = Ext.getStore('machine-craft-store');
		var store3 = Ext.getStore('machine-detail-store');

		store1.load({
			params : {
				deptid : kValue
			}
		});
		store2.load({
			params : {
				deptid : kValue
			}
		});
		store3.load({
			params : {
				deptid : kValue
			}
		});
	}

});
/*
 * File: app/view/MyWindow.js
 * 
 * This file was generated by Sencha Architect version 2.2.0.
 * http://www.sencha.com/products/architect/
 * 
 * This file requires use of the Ext JS 4.2.x library, under independent
 * license. License of Sencha Architect does not include license for Ext JS
 * 4.2.x. For more details see http://www.sencha.com/license or contact
 * license@sencha.com.
 * 
 * This file will be auto-generated each and everytime you save your project.
 * 
 * Do NOT hand edit this file.
 */
Ext.define('Module.WorkPartWindow', {
	extend : 'Ext.window.Window',

	height : 750,
	width : 1000,
	layout : {
		type : 'border'
	},
	title : '工件详细情况',
	modal : true,
	partid : null,
	resumeid : null,
	partinfo : null,

	initComponent : function() {
		var me = this;

		Ext.applyIf(me, {
			items : [ {
				xtype : 'container',
				region : 'west',
				width : 450,
				defaults : {
					padding : 3
				},
				layout : {
					type : 'border'
				},
				items : [ {
					xtype : 'gridpanel',
					region : 'center',
					title : '预计加工排程',
					store : Ext.data.Store({
						fields : [ 'craftname', 'starthour', 'endhour', 'esthour' ],
						autoLoad : true,
						proxy : {
							url : 'public/getRegularEstimateSchedule?partid=' + me.partid + '&resumeid=' + me.resumeid,
							type : 'ajax',
							reader : {
								type : 'json'
							}
						}
					}),
					columns : [ {
						xtype : 'gridcolumn',
						dataIndex : 'craftname',
						width : 120,
						text : '工艺名称',
						renderer : function(val) {
							return (val ? '<b>' + val + '</b>' : val);
						}
					}, {
						xtype : 'gridcolumn',
						dataIndex : 'starthour',
						width : 120,
						text : '开始时间',
						renderer : function(val) {
							return (val ? '<b>' + val + '</b>' : val);
						}
					}, {
						xtype : 'gridcolumn',
						dataIndex : 'endhour',
						width : 120,
						text : '结束时间',
						renderer : function(val) {
							return (val ? '<b>' + val + '</b>' : val);
						}
					}, {
						xtype : 'gridcolumn',
						dataIndex : 'esthour',
						width : 60,
						text : '用时',
						renderer : function(val) {
							return (val ? '<b>' + val + '</b>' : val);
						}
					} ]
				}, {
					xtype : 'gridpanel',
					region : 'south',
					split : true,
					height : 200,
					store : new Ext.data.Store({
						fields : [ 'craftname', 'starthour', 'endhour', 'usehour' ],
						autoLoad : true,
						proxy : {
							url : 'public/getActualWorkSchedule?partid=' + me.partid + '&resumeid=' + me.resumeid,
							type : 'ajax',
							reader : {
								type : 'json'
							}
						}
					}),
					title : '实际生产排程',
					columns : [ {
						xtype : 'gridcolumn',
						dataIndex : 'craftname',
						text : '工艺名称',
						width : 120,
						renderer : function(val) {
							return (val ? '<b>' + val + '</b>' : val);
						},
					}, {
						xtype : 'gridcolumn',
						dataIndex : 'starthour',
						width : 120,
						renderer : function(val) {
							return (val ? '<b>' + val.substring(0, 13) + '</b>' : val);
						},
						text : '开始时间'
					}, {
						xtype : 'gridcolumn',
						dataIndex : 'endhour',
						width : 120,
						text : '结束时间',
						renderer : function(val) {
							return (val ? '<b>' + val.substring(0, 13) + '</b>' : val);
						},
					}, {
						xtype : 'gridcolumn',
						dataIndex : 'usehour',
						width : 60,
						text : '用时',
						renderer : function(val) {
							return (val ? '<b>' + val + '</b>' : val);
						},
					} ]
				}, {
					xtype : 'form',
					region : 'north',
					height : 291,
					defaults : {
						padding : '0 2'
					},
					bodyPadding : 3,
					title : '工件动态',
					layout : {
						type : 'table',
						columns : 2
					},
					items : [ {
						xtype : 'textfield',
						anchor : '100%',
						value : me.partinfo.partlistcode,
						fieldLabel : '工件代号',
						labelWidth : 65,
						readOnly : true
					}, {
						xtype : 'textfield',
						value : me.partinfo.partname,
						anchor : '100%',
						fieldLabel : '工件名称',
						labelWidth : 65,
						readOnly : true
					}, {
						xtype : 'textfield',
						value : me.partinfo.statename,
						anchor : '100%',
						fieldLabel : '当前状态',
						labelWidth : 65,
						readOnly : true
					}, {
						xtype : 'textfield',
						value : me.partinfo.regionname,
						anchor : '100%',
						fieldLabel : '所在单位',
						labelWidth : 65,
						readOnly : true
					}, {
						xtype : 'textfield',
						anchor : '100%',
						fieldLabel : '机台编号',
						value : me.partinfo.batchno,
						labelWidth : 65,
						readOnly : true
					}, {
						xtype : 'textfield',
						anchor : '100%',
						fieldLabel : '当前工艺',
						value : me.partinfo.craftname,
						labelWidth : 65,
						readOnly : true
					}, {
						xtype : 'textfield',
						anchor : '100%',
						value : me.partinfo.esthour,
						fieldLabel : '加工需时',
						labelWidth : 65,
						readOnly : true
					}, {
						xtype : 'textfield',
						anchor : '100%',
						fieldLabel : '实际用时',
						value : me.partinfo.acthour,
						labelWidth : 65,
						readOnly : true
					}, {
						xtype : 'textfield',
						anchor : '100%',
						fieldLabel : '加工费用',
						value : me.partinfo.totalfee,
						labelWidth : 65,
						readOnly : true
					},
					// TODO XXXX
					{
						xtype : 'textfield',
						anchor : '100%',
						value : me.partinfo.piccode,
						fieldLabel : '工件图号',
						labelWidth : 65,
						readOnly : true
					}, {
						xtype : 'textfield',
						value : me.partinfo.hardness,
						anchor : '100%',
						fieldLabel : '硬度HRC',
						labelWidth : 65,
						readOnly : true
					}, {
						xtype : 'textfield',
						value : me.partinfo.buffing,
						anchor : '100%',
						fieldLabel : '表面处理',
						labelWidth : 65,
						readOnly : true
					}, {
						xtype : 'textfield',
						value : (me.partinfo.materialsrc ? '外协' : '仓库'),
						anchor : '100%',
						fieldLabel : '材料来源',
						labelWidth : 65,
						readOnly : true
					}, {
						xtype : 'textfield',
						anchor : '100%',
						fieldLabel : '材料类型',
						value : (me.partinfo.materialtype ? '软料' : '硬料'),
						labelWidth : 65,
						readOnly : true
					}, {
						xtype : 'textfield',
						anchor : '100%',
						fieldLabel : '公差',
						value : me.partinfo.tolerance,
						labelWidth : 65,
						readOnly : true
					}, {
						xtype : 'textfield',
						anchor : '100%',
						value : (me.partinfo.reform ? '是' : '否'),
						fieldLabel : '标件改造',
						labelWidth : 65,
						readOnly : true
					}, {
						xtype : 'textfield',
						anchor : '100%',
						fieldLabel : '是否基件',
						value : (me.partinfo.isfixed ? '是' : '否'),
						labelWidth : 65,
						readOnly : true
					}, {
						xtype : 'textfield',
						anchor : '100%',
						fieldLabel : '备注说明',
						value : me.partinfo.remark,
						labelWidth : 65,
						readOnly : true
					} ]
				} ]
			}, {
				xtype : 'container',
				region : 'center',
				defaults : {
					padding : 3
				},
				layout : {
					type : 'border'
				},
				items : [ {
					xtype : 'gridpanel',
					region : 'center',
					store : new Ext.data.Store({
						fields : [ 'partlistcode', 'partname', 'regionname', 'craftname', 'batchno', 'statename', 'empname', 'lrcdtime' ],
						autoLoad : true,
						proxy : {
							url : 'public/getModuleProcessDetails?partid=' + me.partid + '&resumeid=' + me.resumeid,
							type : 'ajax',
							reader : {
								type : 'json'
							}
						}
					}),
					title : '零件加工明细',
					columns : [ {
						xtype : 'gridcolumn',
						dataIndex : 'partlistcode',
						text : '零件编号',
						width : 80,
						renderer : me.setFontBold
					}, {
						xtype : 'gridcolumn',
						dataIndex : 'partname',
						text : '零件名称',
						renderer : me.setFontBold
					}, {
						xtype : 'gridcolumn',
						dataIndex : 'regionname',
						text : '所在单位',
						renderer : me.setFontBold
					}, {
						xtype : 'gridcolumn',
						dataIndex : 'craftname',
						text : '加工工艺',
						renderer : me.setFontBold
					}, {
						xtype : 'gridcolumn',
						dataIndex : 'batchno',
						text : '机台编号',
						width : 80,
						renderer : me.setFontBold
					}, {
						xtype : 'gridcolumn',
						dataIndex : 'statename',
						text : '零件状态',
						width : 80,
						renderer : me.setFontBold
					}, {
						xtype : 'gridcolumn',
						dataIndex : 'empname',
						width : 80,
						text : '操作人员',
						renderer : me.setFontBold
					}, {
						xtype : 'gridcolumn',
						dataIndex : 'lrcdtime',
						text : '操作时间',
						width : 150,
						renderer : me.setFontBold
					} ]
				} ]
			} ]
		});

		me.callParent(arguments);
	},
	setFontBold : function(val) {
		return (val ? '<b>' + val + '</b>' : val);
	}
});
Ext.define('SetFitDateWindow', {
	extend : 'Ext.window.Window',
	title : '设置组装完成时间',
	width : 350,
	height : 100,
	modal : true,
	layout : 'hbox',
	rsmid : '',
	pGrid : null,
	defaults : {
		padding : 8
	},
	bbar : [ '->', {
		text : '保存设定',
		iconCls : 'gtk-save-16',
		handler : function() {
			var setdate = Ext.getCmp('mpg-fit-date').getValue();
			var isnull = Ext.getCmp('mpg-fit-isnull').getValue();
			var _grid = this.up('window');
			var resumeid = _grid.rsmid;

			Ext.Ajax.request({
				url : 'module/manage/setOrClearFitDate',
				params : {
					resumeid : resumeid,
					setdate : setdate,
					isnull : isnull
				},
				method : 'POST',
				success : function(resp) {
					var backJson = Ext.JSON.decode(resp.responseText);
					if (backJson.success) {
						_grid.pGrid.getStore().reload();
						_grid.pGrid.getSelectionModel().deselectAll();

						_grid.close();
					} else {
						showError(backJson.msg);
					}
				},
				failure : function(x, y, z) {
					showError('连接服务器失败,请再次尝试!');
				}
			});
		}
	} ],
	initComponent : function() {
		var me = this;
		me.items = [ {
			id : 'mpg-fit-date',
			xtype : 'datefield',
			fieldLabel : '设置日期',
			labelWidth : 65,
			editable : false,
			format : 'Y-m-d'
		}, {
			id : 'mpg-fit-isnull',
			xtype : 'checkbox',
			boxLabel : '设为空'
		} ];
		me.callParent(arguments);
	}
});
Ext.define('ShowModuleWindow', {
	extend : 'Ext.window.Window',
	title : '零件加工清单',
	width : 1000,
	height : 700,
	modal : true,
	layout : 'border',
	resumeid : null,
	modulebarcode : null,
	modulecode : null,
	guestcode : null,
	installer : null,
	isUsed : false,
	deviser : null,
	checked : false,
	initComponent : function() {
		var me = this;
		me.items = [ {
			id : 'mpg-grid-part-info',
			xtype : 'gridpanel',
			region : 'center',
			rowLines : true,
			border : false,
			columnLines : true,
			listeners : {
				itemdblclick : function(grid, record, item, index, e, eOpts) {
					var _partid = record.get('partbarlistcode');
					var _resumeid = record.get('moduleresumeid');

					Ext.Ajax.request({
						url : 'public/getWorkPartInformation',
						params : {
							partid : _partid,
							resumeid : _resumeid
						},
						method : 'POST',
						success : function(resp) {
							var json = Ext.JSON.decode(resp.responseText);
							if (json.length > 0) {
								new Module.WorkPartWindow({
									partid : _partid,
									resumeid : _resumeid,
									partinfo : json[0]
								}).show();
							} else {
								showError('查询不到工件的相关资料!');
							}
						},
						failure : function(x, y, z) {
							showError('加载工件资料失败!');
						}
					});
				}
			},
			store : Ext.create('Ext.data.Store', {
				id : 'mpg-store-part-info',
				fields : [ 'partlistcode', 'partbarlistcode', 'moduleresumeid', 'partname', 'regionname', 'statename', 'batchno', 'craftname',
						'craftcode', 'empname', 'actiontime', 'scher', 'remark', 'per', 'planbacktime' ],
				autoLoad : true,
				proxy : {
					url : 'public/getAllPartsProcessInfo?classid=1&astateid=' + MSConfig.partStart + '&fstateid=' + MSConfig.partFinish + '&doall='
							+ MSConfig.craftAll + '&resumeid=' + me.resumeid + '&used=false' + '&chk=' + me.checked,
					type : 'ajax',
					reader : {
						type : 'json'
					}
				}
			}),
			columns : [ {
				text : '零件编号',
				dataIndex : 'partlistcode',
				renderer : function(val, meta, record) {
					var remark = record.get('remark');
					if (remark) {
						val += ('<font color = blue>[' + remark + ']</font>');
					}

					return (val ? '<b>' + val + '</b>' : val);
				}
			}, {
				text : '生产排程',
				dataIndex : 'scher',
				width : 400,
				renderer : me.renderBoldFont
			}, {
				text : '工件状态',
				dataIndex : 'statename',
				renderer : me.renderBoldFont
			}, {
				text : '外发回厂时间',
				dataIndex : 'planbacktime',
				renderer : me.renderBoldFont
			}, {
				text : '所在单位',
				dataIndex : 'regionname',
				renderer : function(val) {
					return (val ? ('<b>' + val + '</b>') : '<b><font color =red>未接收</font></b>');
				}
			}, {
				text : '所在机台',
				dataIndex : 'batchno',
				renderer : function(val) {
					return (val ? ('<b>' + val + '</b>') : '<b><font color =red>未上机</font></b>');
				}
			}, {
				text : '加工工艺',
				dataIndex : 'craftname',
				width : 200,
				renderer : function(val, meta, record) {
					var _craftcode = record.get('craftcode');
					return val ? ('<b>' + val + (_craftcode ? ('[' + _craftcode + ']') : '') + '</b>') : val;
				}
			}, {
				text : '操作人员',
				dataIndex : 'empname',
				renderer : me.renderBoldFont
			}, {
				text : '完成进度',
				dataIndex : 'per',
				renderer : me.scheduleProgressBar
			}, {
				text : '操作时间',
				dataIndex : 'actiontime',
				width : 180,
				renderer : function(val, meta, record) {
					var _statename = record.get('statename');
					return ((_statename && val) ? '<b>' + val + '</b>' : '');
				}
			} ],
			tbar : [
					{
						id : 'mpg-module-resume-list',
						xtype : 'combobox',
						fieldLabel : '模具履历',
						valueField : 'id',
						displayField : 'rname',
						editable : false,
						labelWidth : 70,
						width : 200,
						store : Ext.create('Ext.data.Store', {
							fields : [ 'id', 'rname', 'finishtime' ],
							autoLoad : true,
							proxy : {
								url : 'public/getModuleResumeList?format=yymmdd&resumeid=' + me.resumeid,
								type : 'ajax',
								reader : {
									type : 'json'
								}
							}
						}),
						listeners : {
							select : function(combo, records) {
								var chkValue = Ext.getCmp('mpg-show-standard').getValue();

								var rsmid = records[0].get('id');
								var used = (records[0].get('finishtime') ? true : false);

								me.resumeid = rsmid;
								me.isUsed = used;

								Ext.getStore('mpg-store-part-info').load(
										{
											url : 'public/getAllPartsProcessInfo?classid=1&astateid=' + MSConfig.partStart + '&fstateid='
													+ MSConfig.partFinish + '&doall=' + MSConfig.craftAll,
											params : {
												resumeid : rsmid,
												chk : chkValue,
												used : used
											}
										});
							}
						}
					},
					'-',
					{
						text : '模具记录',
						iconCls : 'script_gear-16',
						handler : function() {
							var self = this.up('window');
							new ModuleResumeWindow({
								modulebarcode : self.modulebarcode
							}).show();
						}
					},
					'-',
					{
						text : '刷新清单',
						iconCls : 'arrow_refresh-16',
						handler : function() {
							Ext.getStore('mpg-store-part-info').reload();
						}
					},
					'-',
					{
						text : '打印清单',
						iconCls : 'printer-16',
						handler : function() {
							var mpg_headers = [ {
								name : '零件编号',
								width : 15
							}, {
								name : '生产排程',
								width : 40
							}, {
								name : '工件状态',
								width : 10
							}, {
								name : '所在单位',
								width : 10
							}, {
								name : '所在机台',
								width : 10
							}, {
								name : '加工工艺',
								width : 15
							} ];

							var partRows = Ext.getStore('mpg-store-part-info').getRange();
							var gridData = [];
							for ( var k in partRows) {
								var remark = partRows[k].get('remark');
								var partdetail = partRows[k].get('partlistcode') + (remark ? '[' + remark + ']' : '');
								var partregion = partRows[k].get('regionname');
								var batchno = partRows[k].get('batchno');

								var rowData = [ partdetail, partRows[k].get('scher'), partRows[k].get('statename'),
										(partregion ? partregion : '未接收'), (batchno ? batchno : '未上机'), partRows[k].get('craftname') ];

								gridData.push(rowData);
							}

							var moduletitle = (me.modulecode ? '社内编号:' + me.modulecode : '') + (me.guestcode ? " 客户番号:" + me.guestcode : '')
									+ (me.installer ? " 组立担当:" + me.installer : '') + (me.deviser ? " 设计担当:" + me.deviser : '');

							var htmlString = App.createPartInfoTable(moduletitle, mpg_headers, gridData);
							$(htmlString).jqprint();
						}
					},
					'->',
					{
						id : 'mpg-show-standard',
						xtype : 'checkbox',
						boxLabel : '<b>显示标准件</b>',
						checked : true,
						listeners : {
							change : function(checkbox, newVal, oldVal) {
								Ext.getStore('mpg-store-part-info').load(
										{
											url : 'public/getAllPartsProcessInfo?classid=1&astateid=' + MSConfig.partStart + '&fstateid='
													+ MSConfig.partFinish + '&doall=' + MSConfig.craftAll,
											params : {
												resumeid : me.resumeid,
												chk : newVal,
												used : me.isUsed
											}
										});
							}
						}
					} ]
		} ];

		me.callParent(arguments);
		Ext.getCmp('mpg-module-resume-list').setValue(me.resumeid);
	},
	renderBoldFont : function(val) {
		return (val ? ('<b>' + val + '</b>') : val);
	},
	/**
	 * 预计进度条
	 */
	scheduleProgressBar : function(value, meta, record) {

		function isNullable(arg1) {
			return !arg1 && arg1 !== 0 && typeof arg1 !== "boolean" ? true : false;
		}

		var rate = (isNullable(value) ? -1 : (value > 100 ? 100 : value));

		var bar = '<div class="progress  progress-striped"><div class="progress-bar progress-bar-beta" role="progressbar" aria-valuenow="';
		bar = bar.concat(value).concat('" aria-valuemin="0" aria-valuemax="100" style="width:').concat(rate < 0 ? 0 : rate).concat('%">');
		bar = bar.concat('<span class="sr-only">').concat(rate < 0 ? '没有排程' : (rate + "%")).concat('</span></div></div>');
		return bar;
	}
});

Ext.define('PmiModel', {
	extend : 'Ext.data.Model',
	idProperty : 'taskid',
	fields : [ {
		name : 'taskid',
		type : 'string'
	}, 'stateid', {
		name : 'statename',
		type : 'string'
	}, 'guestid', {
		name : 'guestname',
		type : 'string'
	}, {
		name : 'tcount',
		type : 'int'
	}, {
		name : 'fcount',
		type : 'int'
	}, {
		name : 'pcount',
		type : 'int'
	}, {
		name : 'mcount',
		type : 'int'
	}, {
		name : 'fee',
		type : 'double'
	} ]
});

Ext.define('LoanModel', {
	extend : 'Ext.data.Model',
	idProperty : 'taskid',
	fields : [ {
		name : 'taskid',
		type : 'string'
	}, {
		name : 'deptname',
		type : 'string'
	}, {
		name : 'acthour',
		type : 'int'
	}, {
		name : 'esthour',
		type : 'int'
	} ]
});

Ext.define('Module.ShowModuleTaskInfo', {
	extend : 'Ext.window.Window',
	width : 920,
	height : 700,
	layout : 'border',
	stateid : null,
	modal : true,
	toolItems : [],
	title : '金型加工讯息',
	iconCls : 'chart_bar-16',
	bodyPadding : 3,
	// tools : [ {
	// type : 'refresh',
	// handler : function() {
	// }
	// } ],
	createToolItem : function(list) {
		var kkk = this;
		var toollist = [ {
			text : '<b>修模/设变上周负荷：</b>',
			iconCls : 'map-16'
		} ];
		for ( var x in list) {
			toollist.push({
				text : '<b>' + list[x].deptname + '：' + kkk.getPer(list[x].acthour, list[x].esthour) + '</b>',
				pressed : true
			});

			toollist.push('-');
		}

		return toollist;
	},
	getPer : function(act, est) {
		if (!est) {
			return '0%';
		}

		return Math.round(act / est * 100) + '%';
	},
	initComponent : function() {
		var self = this;

		self.tbar = self.createToolItem(self.toolItems);
		self.items = [ Ext.create('Ext.grid.Panel', {
			split : true,
			region : 'west',
			width : 450,
			title : '客户模具加工讯息',
			iconCls : 'house_go-16',
			columnLines : true,
			tbar : [ {
				id : 'mpg-guest-txt-modify',
				text : '<b>修模：0套</b>',
				iconCls : 'wrench-16'
			}, '-', {
				id : 'mpg-guest-txt-change',
				text : '<b>设变：0套</b>',
				iconCls : 'wand-16'
			} ],
			store : Ext.create('Ext.data.Store', {
				autoLoad : true,
				model : 'PmiModel',
				proxy : {
					url : 'public/getCurrentProcessInfo?stateid=' + self.stateid,
					type : 'ajax',
					reader : {
						type : 'json'
					}
				},
				groupField : 'guestname',
				listeners : {
					load : function(store, records, successful, eOpts) {
						var mcount = 0, ccount = 0;
						for ( var x in records) {
							var stateid = records[x].get('stateid');
							var tcount = records[x].get('tcount');
							if (stateid == '20402') {
								mcount += tcount;
							}

							if (stateid == '20403') {
								ccount += tcount;
							}
						}

						Ext.getCmp('mpg-guest-txt-modify').setText('<b>修模：' + mcount + '套</b>');
						Ext.getCmp('mpg-guest-txt-change').setText('<b>设变：' + ccount + '套</b>');
					}
				}
			}),
			features : [ {
				id : 'ttview',
				ftype : 'groupingsummary',
				groupHeaderTpl : '{name}',
				// hideGroupedHeader : true,
				enableGroupingMenu : false
			}, {
				ftype : 'summary',
				dock : 'bottom'
			} ],
			columns : [ {
				text : '加工状态',
				// locked : true,
				tdCls : 'task',
				sortable : false,
				dataIndex : 'statename',
				hideable : false
			}, {
				header : '客户名称',
				width : 120,
				sortable : false,
				dataIndex : 'guestname'
			}, {
				header : '模具数量',
				sortable : false,
				width : 70,
				dataIndex : 'tcount',
				summaryType : 'sum',
				summaryRenderer : function(val) {
					return '<b>' + val + '套</b>';
				}
			}, {
				header : '加工中',
				sortable : false,
				width : 70,
				dataIndex : 'pcount',
				summaryType : 'sum',
				summaryRenderer : function(val, record) {
					return '<b>' + val + '套</b>';
				}
			}, {
				header : '抛光/组立',
				width : 70,
				sortable : false,
				dataIndex : 'fcount',
				summaryType : 'sum',
				summaryRenderer : function(val) {
					return '<b>' + val + '套</b>';
				}
			} ]
		}), Ext.create('Ext.grid.Panel', {
			region : 'center',
			title : '上周模具加工报告',
			iconCls : 'calendar-16',
			tbar : [ {
				id : 'mpg-week-txt-modify',
				text : '<b>修模：0套</b>',
				iconCls : 'wrench-16'
			}, '-', {
				id : 'mpg-week-txt-change',
				text : '<b>设变：0套</b>',
				iconCls : 'wand-16'
			}, '->', {
				xtype : 'combobox',
				width : 80,
				store : Ext.create('Ext.data.Store', {
					fields : [ 'typeid', 'typename' ],
					autoLoad : true,
					data : [ {
						typeid : 0,
						typename : '上周完成',
						ismonth : true
					}, {
						typeid : 1,
						typename : '上月完成'
					} ]
				}),
				displayField : 'typename',
				valueField : 'typeid',
				editable : false,
				value : 0,
				listeners : {
					select : function(combo, records) {
						if (records.length) {
							this.up('gridpanel').getStore().reload({
								params : {
									typeid : records[0].get('typeid')
								}
							});
						}
					}
				}
			} ],
			columnLines : true,
			store : Ext.create('Ext.data.Store', {
				model : 'PmiModel',
				autoLoad : true,
				proxy : {
					url : 'public/getFinishOfLastWeek?stateid=' + self.stateid,
					type : 'ajax',
					reader : {
						type : 'json'
					}
				},
				groupField : 'guestname',
				listeners : {
					load : function(store, records, successful, eOpts) {
						var mcount = 0, ccount = 0;
						for ( var x in records) {
							var stateid = records[x].get('stateid');
							var tcount = records[x].get('mcount');
							if (stateid == '20402') {
								mcount += tcount;
							}

							if (stateid == '20403') {
								ccount += tcount;
							}
						}

						Ext.getCmp('mpg-week-txt-modify').setText('<b>修模：' + mcount + '套</b>');
						Ext.getCmp('mpg-week-txt-change').setText('<b>设变：' + ccount + '套</b>');
					}
				}
			}),
			features : [ {
				id : 'ttview',
				ftype : 'groupingsummary',
				groupHeaderTpl : '{name}',
				// hideGroupedHeader : true,
				enableGroupingMenu : false
			}, {
				ftype : 'summary',
				dock : 'bottom'
			} ],
			columns : [ {
				text : '加工状态',
				// locked : true,
				tdCls : 'task',
				sortable : false,
				dataIndex : 'statename',
				hideable : false
			}, {
				header : '客户名称',
				width : 120,
				sortable : false,
				dataIndex : 'guestname'
			}, {
				header : '模具数量',
				sortable : false,
				dataIndex : 'mcount',
				summaryType : 'sum',
				summaryRenderer : function(val) {
					return '<b>' + val + '套</b>';
				}
			}, {
				header : '加工费用',
				sortable : false,
				dataIndex : 'fee',
				summaryType : 'sum',
				summaryRenderer : function(val) {
					return (val ? '<b>' + MathRound(val, 2, 0) + '</b>' : val);
				}
			} ]
		}) ];

		self.callParent(arguments);
	}
});

/**
 * 新模加工进度公告板
 */
Ext.define('Module.portlet.MoldueProcessGrid', {
	extend : 'Ext.grid.Panel',
	alias : 'widget.gridportlet',
	height : 720,
	scheduleId : [],
	tState : [],
	/**
	 * 所选的加工模具状态
	 */
	nowState : [],
	typeSet : [ {
		typeid : 'mp-state-all',
		stateid : [ '20401', '20402', '20403', '20408', '20409', '20410' ],
		tname : '全部',
		scount : 0
	}, {
		typeid : 'mp-state-new',
		stateid : [ '20401' ],
		tname : '新模',
		scount : 0
	}, {
		typeid : 'mp-state-modify',
		stateid : [ '20402', '20403' ],
		tname : '修模/设变',
		scount : 0
	}, {
		typeid : 'mp-state-part',
		stateid : [ '20408' ],
		tname : '零件',
		scount : 0
	}, {
		typeid : 'mp-state-jig',
		tname : '治具',
		stateid : [ '20409' ],
		scount : 0
	}, {
		typeid : 'mp-state-lc',
		tname : '量产',
		stateid : [ '20410' ],
		scount : 0
	} ],
	initComponent : function() {
		var me = this;

		Ext.define('ModuleSchedule', {
			extend : 'Ext.data.Model',
			fields : [ "shortname", "actual", "guestid", "rsename", 'id', {
				name : "inittrytime",
				type : 'date'
			}, "modulebarcode", 'guestcode', "moduleclass", "modulecode", "moduleintro", "modulestate", "plastic", "productname", "schedule", {
				name : "starttime",
				type : 'date'
			}, "unitextrac", "workpressure", {
				name : "delayhour",
				type : 'int'
			}, 'installer', 'deviser', {
				name : "processed",
				type : 'date'
			}, {
				name : 'isurgent',
				type : 'int'
			}, {
				name : 'mcount',
				type : 'int'
			}, 'fitdate', {
				name : 'sper',
				type : 'float'
			} ],
			requires : [ 'Ext.data.SequentialIdGenerator' ],
			idgen : 'sequential'
		});

		var schStore = Ext.create('Ext.data.Store', {
			model : 'ModuleSchedule',

			autoLoad : true,
			proxy : {
				type : 'ajax',
				url : 'public/moduleSchedule?classid=1&astateid=' + MSConfig.partStart + '&fstateid=' + MSConfig.partFinish + '&doall='
						+ MSConfig.craftAll,
				reader : {
					type : 'json',
					root : 'process'
				}
			},
			listeners : {
				load : function(store, records) {
					me.scheduleId = [];
					for ( var i in records) {
						me.scheduleId.push(records[i].getId());
					}
				}
			}
		});

		Ext.apply(me, {
			height : this.height,
			stripeRows : true,
			columnLines : true,
			forceFit : true,
			selModel : {
				selType : 'checkboxmodel',
				mode : 'SIMPLE'
			},
			viewConfig : {
				// enableTextSelection : 'true',
				getRowClass : function(record, index, rowParams, store) {
					return (record.get('isurgent') ? 'row-urgent' : '');
				}
			},
			store : schStore,
			tbar : [ {
				xtype : 'button',
				id : 'mp-state-all',
				text : '<b>全部[62]</b>',
				iconCls : 'sum-16',
				handler : me.getTypeInfo
			}, '-', {
				id : 'mp-state-new',
				text : '<b>新模[12]</b>',
				iconCls : 'cog_add-16',
				handler : me.getTypeInfo
			}, '-', {
				id : 'mp-state-modify',
				text : '<b>修模/设变[44]</b>',
				iconCls : 'cog_edit-16',
				handler : me.getTypeInfo
			}, '-', {
				id : 'mp-state-part',
				text : '<b>零件[6]</b>',
				iconCls : 'cog_go-16',
				handler : me.getTypeInfo
			}, '-', {
				id : 'mp-state-jig',
				text : '<b>治具[6]</b>',
				iconCls : 'cog-16',
				handler : me.getTypeInfo
			}, '-', {
				id : 'mp-state-lc',
				text : '<b>量产加工[6]</b>',
				iconCls : 'wand-16',
				handler : me.getTypeInfo
			}, '->', {
				text : '<b>生产负荷</b>',
				iconCls : 'chart_line-16',
				handler : function() {
					new WorkLoadHighCharts().show();
				}
			}, '-', {
				text : '<b>员工效率</b>',
				iconCls : 'group_gear-16',
				handler : function() {
					new EmployeeEfficiency().show();
				}
			},
			// '-', {
			// text : '<b>预计负荷</b>',
			// hidden : true,
			// iconCls : 'chart_line-16',
			// handler : function() {
			// new Module.ShowEstimateLoad({
			// initKey : {
			// isall : false,
			// day : 0
			// }
			// }).show();
			// }
			// },
			'-', {
				text : '<b>加工明细</b>',
				iconCls : 'calendar-16',
				handler : function() {
					var tState = "'" + this.up('gridpanel').tState.join("','") + "'";
					Ext.Ajax.request({
						url : 'public/getWeekLoadReport',
						method : 'POST',
						params : {
							stateid : tState
						},
						success : function(resp) {
							var backJson = Ext.JSON.decode(resp.responseText);
							Ext.create('Module.ShowModuleTaskInfo', {
								stateid : tState,
								toolItems : backJson
							}).show();
						}
					});
				}
			}, '-', {
				text : '<b>机台稼动</b>',
				iconCls : 'chart_bar-16',
				handler : function() {
					var wind = new MachineSituationWindow();
					wind.show();
				}
			}, '-', {
				text : '<b>组立完成</b>',
				iconCls : 'wrench-16',
				handler : function() {
					var _grid = this.up('gridpanel');
					var _selRow = _grid.getSelectionModel().getSelection();
					if (!_selRow.length) {
						showError('没有选中任何要设置组立完成的模具资料!');
						return;
					}

					var rlist = [];
					for ( var x in _selRow) {
						rlist.push(_selRow[x].get('id'));
					}

					var resumestr = "'" + rlist.join("','") + "'";

					new SetFitDateWindow({
						rsmid : resumestr,
						pGrid : _grid
					}).show();
				}
			}, '-', {
				text : '<b>模具设定</b>',
				iconCls : 'cog-16',
				handler : function() {
					var _grid = this.up('gridpanel');
					var _selRow = _grid.getSelectionModel().getSelection();
					if (!_selRow.length) {
						showError('没有选中任何要设置紧急状态的模具资料!');
						return;
					}
					new ModuleHandleSettings({
						moduleGrid : _grid
					}).show();
					// TODO DDDDDDDD
				}
			} ],
			columns : [ {
				text : '<b>模具工号</b>',
				width : 140,
				dataIndex : 'modulecode',
				renderer : me.getBoldRender
			}, {
				text : '<b>客户番号</b>',
				width : 130,
				dataIndex : 'guestcode',
				renderer : me.getBoldRender
			}, {
				text : '<b>客户名称</b>',
				width : 100,
				dataIndex : 'shortname',
				renderer : me.getBoldRender
			}, {
				text : '<b>客户机种</b>',
				width : 130,
				dataIndex : 'moduleclass',
				renderer : me.getBoldRender
			}, {
				text : '<b>部品名称</b>',
				width : 200,
				dataIndex : 'productname',
				renderer : me.getBoldRender,
				hidden : true
			}, {
				text : '<b>加工<br>状态</b>',
				width : 60,
				align : 'center',
				dataIndex : 'rsename',
				renderer : me.getBoldRender
			}, {
				text : '<b>组立<br>担当</b>',
				width : 60,
				align : 'center',
				dataIndex : 'installer',
				renderer : me.getBoldRender
			}, {
				text : '<b>设计<br>担当</b>',
				width : 60,
				align : 'center',
				dataIndex : 'deviser',
				renderer : me.getBoldRender
			}, {
				text : '修正<br>次数',
				style : 'font-weight:bold;',
				width : 40,
				align : 'center',
				dataIndex : 'mcount',
				renderer : function(val) {
					return '<b>' + val + '</b>';
				}
			}, {
				text : '实际进度',
				style : 'font-weight:bold;',
				width : 70,
				sortable : true,
				dataIndex : 'actual',
				renderer : me.actualProgressBar
			// ,hidden : true
			}, {
				text : '<b>计划进度</b>',
				width : 70,
				dataIndex : 'sper',
				renderer : me.scheduleProgressBar

			}, {
				text : '<b>计划开始</b>',
				xtype : 'datecolumn',
				width : 110,
				// format : 'Y-m-d H',
				dataIndex : 'starttime',
				renderer : function(val) {
					return (val ? '<b>' + Ext.Date.format(val, 'Y-m-d H') + '</b>' : val);
				}
			}, {
				text : '<b>计划完成</b>',
				xtype : 'datecolumn',
				width : 110,
				// format : 'Y-m-d H',
				dataIndex : 'inittrytime',
				renderer : function(val) {
					return (val ? '<b>' + Ext.Date.format(val, 'Y-m-d H') + '</b>' : val);
				}
			}, {
				text : '<b>加工完成时间</b>',
				xtype : 'datecolumn',
				width : 110,
				// format : 'Y-m-d H',
				dataIndex : 'processed',
				renderer : function(val) {
					return (val ? '<b>' + Ext.Date.format(val, 'Y-m-d H') + '</b>' : val);
				}
			}, {
				text : '<b>组立完成时间</b>',
				width : 110,
				dataIndex : 'fitdate',
				renderer : me.getBoldRender
			}
			// , {
			// text : '<b>距离预计完工</b>',
			// width : 110,
			// dataIndex : 'delayhour',
			// renderer : me.delayRender
			// }
			],
			listeners : {
				itemdblclick : function(grid, record) {
					var modulecode = record.get('modulecode');
					var modulebarcode = record.get('modulebarcode');
					var guestcode = record.get('guestcode');
					var installer = record.get('installer');
					var deviser = record.get('deviser');
					var rsmid = record.get('id');
					new ShowModuleWindow({
						title : modulecode + '零件加工进度',
						modulecode : modulecode,
						modulebarcode : modulebarcode,
						guestcode : guestcode,
						installer : installer,
						deviser : deviser,
						resumeid : rsmid,
						checked : true
					}).show();
				}
			}
		});

		this.callParent(arguments);
		me.getTypeCount(me.typeSet, 0);
	},
	getTypeInfo : function() {
		var btn = this;
		var grid = btn.up('gridpanel');
		var statelist = [];

		for ( var x in grid.typeSet) {
			if (grid.typeSet[x].typeid == btn.id) {
				Ext.getCmp(grid.typeSet[x].typeid).toggle(true);
				statelist = grid.typeSet[x].stateid;
			} else {
				Ext.getCmp(grid.typeSet[x].typeid).toggle(false);
			}
		}

		// 获取选中的模具加工类型
		grid.tState = statelist;

		var statestr = "'" + statelist.join("','") + "'";
		grid.getStore().load({
			params : {
				stateid : statestr
			}
		});
	},
	getTypeCount : function(sel, sindex) {
		var self = this;

		// 先将缓存的加工模具清零
		for ( var m in sel) {
			sel[m].scount = 0;
		}

		Ext.Ajax.request({
			url : 'public/getProcessModuleTypeCount',
			method : 'POST',
			success : function(data) {
				var backJson = Ext.JSON.decode(data.responseText);
				if (backJson && backJson.length > 0) {
					for ( var x in backJson) {
						for ( var y in sel) {
							if (self.isArrayExsit(sel[y].stateid, backJson[x].resumestate)) {
								sel[y].scount += (backJson[x].scount);
							}
						}
					}
				}

				for ( var m in sel) {
					Ext.getCmp(sel[m].typeid).setText('<b>' + sel[m].tname + '[' + sel[m].scount + ']</b>');
				}

				self.tState = sel[sindex].stateid;
				Ext.getCmp(sel[sindex].typeid).toggle(true);
			}
		});
	},

	/**
	 * 判断一个字符是否在字符数组中存在
	 */
	isArrayExsit : function(arr, item) {
		for ( var x in arr) {
			if (arr[x] == item) {
				return (true);
			}
		}

		return false;
	},

	/**
	 * 查找条件菜单显示方法
	 */
	searchHandler : function(e, portlet, target, header, tool) {

		Ext.create('Ext.menu.Menu', {
			items : [ {
				xtype : 'menuitem',
				text : '机种',
				success : false,
				findField : 'moduleclass',
				parentHeader : header,
				listeners : {
					scope : portlet,
					focus : portlet.findMenu
				}
			}, {
				xtype : 'menuitem',
				text : '客户',
				success : false,
				findField : 'shortname',
				parentHeader : header,
				listeners : {
					scope : portlet,
					focus : portlet.findMenu
				}
			}, {
				xtype : 'menuitem',
				text : '加工类型',
				success : false,
				findField : 'rsename',
				parentHeader : header,
				listeners : {
					scope : portlet,
					focus : portlet.findMenu
				}
			}, '-', {
				xtype : 'menuitem',
				text : '所有模具',
				success : false,
				findField : 'shortname',
				handler : function(menuitem) {
					portlet.getStore().clearFilter();
					header.setTitle('模具加工进度');
				}

			} ]
		}).showAt(e.getXY());

	},

	/**
	 * 生成条件查询菜单
	 */
	findMenu : function(menu, e) {
		var me = this;

		if (menu.success) {
			return;
		}
		var mc = me.groupField(menu.findField);
		var menus = [];
		Ext.Array.forEach(mc, function(item) {
			menus.push({
				xtype : 'menuitem',
				text : item,
				handler : function(menuitem) {
					me.findModuleProcess(menu.findField, menuitem.text);
					menu.parentHeader.setTitle('<span style="color:#C107C9;">' + menuitem.text + '</span> 加工进度');
				}
			});
		});
		menu.setMenu(Ext.create('Ext.menu.Menu', {
			items : menus
		}));

		menu.success = true;

	},

	/**
	 * 对指定字段进行分组
	 */
	groupField : function(fieldName) {
		var store = this.getStore();
		var temp = [];
		for (var i = 0; i < this.scheduleId.length; i++) {
			Ext.Array.include(temp, store.getById(this.scheduleId[i]).get(fieldName));
		}

		return temp;
	},

	/**
	 * 刷新数据方法
	 */
	refreshHandler : function(e, portlet, target, header, tool) {
		var store = portlet.getStore();
		store.load();
	},

	/**
	 * 查指定的模具
	 */
	findModuleProcess : function(fieldName, param) {

		var store = this.getStore();
		var regexp = new RegExp(Ext.String.escapeRegex(param), 'i');

		if (store.isFiltered()) {
			store.clearFilter();
		}

		store.filter(function(task) {
			return regexp.test(task.get(fieldName));
		});

	},

	/**
	 * 实际进度条
	 */
	actualProgressBar : function(value, meta, record) {
		value = !value ? 0 : (value > 100 ? 100 : value);
		var bar = '<div class="progress  progress-striped"><div class="progress-bar progress-bar-';
		bar = bar.concat(value < record.data.schedule || 0 ? 'danger' : 'success').concat('" role="progressbar" aria-valuenow="');
		bar = bar.concat(value).concat('" aria-valuemin="0" aria-valuemax="100" style="width:').concat(value).concat('%">');
		bar = bar.concat('<span class="sr-only">').concat(value).concat('%</span></div></div>');
		return bar;
	},

	delayRender : function(value, meta, record) {
		var self = this;
		return self.getDelayResult(value);
	},

	/**
	 * 预计进度条
	 */
	scheduleProgressBar : function(value, meta, record) {
		value = value != null ? (value > 100 ? 100 : value) : '没有排程';
		var bar = '<div class="progress  progress-striped"><div class="progress-bar progress-bar-beta" role="progressbar" aria-valuenow="';
		bar = bar.concat(value).concat('" aria-valuemin="0" aria-valuemax="100" style="width:').concat(value == '没有排程' ? 0 : value).concat('%">');
		bar = bar.concat('<span class="sr-only">').concat(value == '没有排程' ? '没有排程' : (value + "%")).concat('</span></div></div>');
		return bar;
	},

	getName : function() {
		return Module.portlet.MoldueProcessGrid.getName();
	},
	/**
	 * 渲染一個表格的值為粗體
	 * 
	 * @param val
	 * @returns
	 */
	getBoldRender : function(val) {
		return !val ? val : ('<b>' + val + '</b>');
	},
	getDelayResult : function(value) {
		if (value == 0) {
			return '<b>预计完工</b>';
		}

		var dayLeft = value % 24;
		var dayNum = (value - dayLeft) / 24;
		var backString = null;
		try {
			if (value > 0) {
				backString = '<b><font color = green>还剩';
				if (dayNum) {
					backString += (dayNum + '天');
				}

				if (dayLeft) {
					backString += (dayLeft + '时');
				}
			} else {
				backString = '<b><font color = "#990033">延迟';
				if (-1 * dayNum) {
					backString += (-1 * dayNum + '天');
				}

				if (-1 * dayLeft) {
					backString += (-1 * dayLeft + '时');
				}
			}

			backString += '</font></b>';
		} catch (e) {
		}

		return backString;
	}
});

Ext.define('Module.ShowEstimateLoad', {
	extend : 'Ext.window.Window',

	height : 750,
	width : 1000,
	title : '工件预计负荷',
	layout : 'border',
	modal : true,
	initKey : null,
	isInit : false,
	reloader : null,
	listeners : {
		destory : function(win) {
			if (win.reloader) {
				clearInterval(self.reloader);
			}
		}
	},
	bodyPadding : 3,
	tbar : [ {
		id : 'mpg-work-load-kind',
		xtype : 'numberfield',
		emptyText : '数字为空查询全部',
		minValue : 0,
		value : 0,
		fieldLabel : '查询计划天数',
		allowDecimals : false
	}, {
		text : '查询计划',
		iconCls : 'search-16',
		handler : function() {
			var days = Ext.getCmp('mpg-work-load-kind').getValue();
			var isall = false;
			if (days == null || isNaN(days)) {
				days = 0;
				isall = true;
			}

			this.up('window').getWorkLoadData('mpg-work-load-tab', {
				isall : isall,
				day : days
			}, false);
			;
		}
	}, '->', {
		xtype : 'checkbox',
		boxLabel : '10秒刷新',
		listeners : {
			change : function(chk, newValue) {
				var self = this.up('window');
				var dayInput = Ext.getCmp('mpg-work-load-kind');
				if (newValue) {
					self.reloader = setInterval(function(mine) {
						// 获取查询工艺类型
						var useDay = dayInput.getValue();
						dayInput.setReadOnly(true);

						var isall = false;
						if (useDay == null || isNaN(useDay)) {
							useDay = 0;
							isall = true;
						}

						var senddata = {
							day : useDay,
							isall : isall
						};
						mine.getWorkLoadData('mpg-work-load-tab', senddata, false);
					}, 10000, self);
				} else {
					if (self.reloader) {
						dayInput.setReadOnly(false);
						clearInterval(self.reloader);
						self.reloader = null;
					}
				}
			}
		}
	}, '-', {
		text : '设置负荷工艺',
		iconCls : 'cog-16',
		handler : function() {
			new ModuleScheduleCrafts().show();
		}
	} ],
	bbar : [],
	initComponent : function() {
		var me = this;

		Ext.applyIf(me, {
			items : [ {
				id : 'mpg-work-load-tab',
				xtype : 'tabpanel',
				height : 644,
				region : 'center'
			} ]
		});

		me.callParent(arguments);

		me.getWorkLoadData('mpg-work-load-tab', me.initKey, me.isInit);
	},
	/**
	 * 获取Combobox的当前Record
	 */
	findComboRecord : function(combo, field) {
		var val = combo.getValue();
		var store = combo.getStore();
		return store.findRecord(field, val);
	},
	/**
	 * 获取工件排程的详细讯息
	 */
	getWorkLoadData : function(tabid, params, init) {
		var self = this;
		var tbar = self.getDockedItems('toolbar[dock="bottom"]')[0];
		var tabPanel = Ext.getCmp(tabid);
		if (!init) {
			tabPanel.removeAll();
			tbar.removeAll();
		}
		Ext.Ajax.request({
			url : 'public/getResumeWorkLoad',
			method : 'POST',
			params : {
				astateid : '20201',
				fstateid : '["20209","20210"]',
				doall : MSConfig.craftAll,
				classid : 1,
				day : params.day,
				dayhour : 24,
				isall : params.isall
			},
			success : function(resp) {
				var backJson = Ext.JSON.decode(resp.responseText);
				if (!backJson || !backJson.length) {
					return;
				}

				for ( var m in backJson) {
					tbar.add([ {
						text : '<b>' + backJson[m].craftname + MathRound(backJson[m].macload, 0, 0) + '小时</b>',
						iconCls : 'chart_curve-16'
					}, '-' ]);
					var tab = {
						title : backJson[m].craftname,
						layout : 'border',
						bodyPadding : 3,
						items : [ {
							xtype : 'gridpanel',
							region : 'center',
							viewConfig : {
								getRowClass : function(record, index, rowParams, store) {
									return (record.get('execute') ? 'row-active' : '');
								}
							},
							tbar : [
									{
										iconCls : 'star-16',
										text : '<b>加工记录:' + backJson[m].list.length + '条</b>'
									},
									'-',
									{
										text : '<b>预计负荷' + MathRound(backJson[m].evaluate, 1, 0) + '小时</b>',
										iconCls : 'chart_curve-16'
									},
									'->',
									{
										text : '打印计划排程',
										iconCls : 'printer-16',
										handler : function() {
											var header = [ {
												name : '模具工号',
												column : 'modulecode'
											}, {
												name : '零件编号',
												column : 'partlistcode'
											}, {
												name : '零件状态',
												column : 'statename'
											}, {
												name : '当前部门',
												column : 'regionname'
											}, {
												name : '所在机台',
												column : 'batchno'
											}, {
												name : '安排工艺',
												column : 'craftname'
											}, {
												name : '开始时间',
												column : 'startdate'
											}, {
												name : '结束时间',
												column : 'enddate'
											}, {
												name : '安排时长',
												column : 'evaluate'
											} ];

											var dataRow = this.up('gridpanel').getStore().getRange();
											var printerHtml = App.createSchePlan('加工记录', '预计时长', 'evaluate', header, dataRow, [ 'startdate',
													'enddate' ], 'Y-m-d');

											$(printerHtml).jqprint();
										}
									} ],
							forceFit : true,
							store : Ext.create('Ext.data.Store', {
								fields : [ 'id', 'craftname', 'empname', 'enddate', 'evaluate', 'modulecode', 'partlistcode', 'regionname',
										'startdate', 'statename', 'batchno', 'usehour', 'proceed', 'execute' ],
								autoLoad : true,
								data : backJson[m].list

							}),
							columns : [ {
								text : '模具工号',
								dataIndex : 'modulecode',
								renderer : function(val) {
									return (val ? '<b>' + val + '</b>' : val);
								}
							}, {
								text : '零件编号',
								dataIndex : 'partlistcode',
								renderer : function(val) {
									return (val ? '<b>' + val + '</b>' : val);
								}
							}, {
								text : '零件状态',
								dataIndex : 'statename',
								renderer : function(val) {
									return (val ? '<b>' + val + '</b>' : val);
								}
							}, {
								text : '所在部门',
								dataIndex : 'regionname',
								renderer : function(val) {
									return (val ? '<b>' + val + '</b>' : val);
								}
							}, {
								text : '所在机台',
								dataIndex : 'batchno',
								renderer : function(val) {
									return (val ? '<b>' + val + '</b>' : val);
								}
							}, {
								text : '安排工艺',
								dataIndex : 'craftname',
								renderer : function(val) {
									return (val ? '<b>' + val + '</b>' : val);
								}
							}, {
								text : '开始时间',
								dataIndex : 'startdate',
								renderer : function(val) {
									return (val ? '<b>' + val.substring(0, 13) + '</b>' : val);
								}
							}, {
								text : '结束时间',
								dataIndex : 'enddate',
								renderer : function(val) {
									return (val ? '<b>' + val.substring(0, 13) + '</b>' : val);
								}
							}, {
								text : '预计时长',
								dataIndex : 'evaluate',
								width : 70,
								renderer : function(val) {
									return (val ? '<b>' + val + '</b>' : val);
								}
							} ]
						} ]
					};

					tabPanel.add(tab);
				}

				tabPanel.setActiveTab(0);
			},
			failure : function(x, y, z) {
				showError('连接网络失败,请检查网络连接!');
			}
		});
	},
	getWorkLoadPercent : function(est, mac) {
		if (!mac) {
			return 0;
		} else {
			var per = parseFloat(est) / parseFloat(mac) * 100;
			return MathRound(per, 1, 0);
		}
	},
	getWorkLoadPanel : function(items) {
		var panels = [];
		for ( var x in items) {
			panels.push({
				xtype : 'panel',
				title : items[x].title
			});
		}

		return panels;
	}

});
// Ext.define('ModuleLoadFrame', {
// extend : 'Ext.window.Window',
//
// height : 300,
// width : 250,
// layout : 'border',
// modal : true,
// title : '设置工艺时长',
// bbar : [ '->', {
// text : '保存资料',
// iconCls : 'gtk-save-16',
// handler : function() {
// var kindid = Ext.getCmp('mpg-work-load-combo').getValue();
// if (!kindid) {
// showInfo('没有选择任何加工类型!');
// return;
// }
// var updateStore = Ext.getStore('mpg-work-load-store');
// var updateRows = updateStore.getUpdatedRecords();
// if (!updateRows.length) {
// showInfo('没有进行任何资料的修改!');
// return;
// }
//
// var sendJson = [];
// for ( var x in updateRows) {
// sendJson.push(updateRows[x].getData());
// }
//
// Ext.Ajax.request({
// url : 'module/manage/saveStandardWorkLoad',
// method : 'POST',
// params : {
// kindid : kindid,
// senddata : Ext.JSON.encode(sendJson)
// },
// success : function(resp) {
// var backJson = Ext.JSON.decode(resp.responseText);
// if (backJson.success) {
// showInfo('操作成功!');
// updateStore.reload();
// } else {
// showError(backJson.msg);
// }
// },
// failure : function(x, y, z) {
// showInfo('连接服务器失败,请检查网络连接!');
// return;
// }
// });
// }
// } ],
// initComponent : function() {
// var me = this;
//
// Ext.applyIf(me, {
// items : [ Ext.create('Ext.grid.Panel', {
// tbar : [ {
// id : 'mpg-work-load-combo',
// xtype : 'combobox',
// fieldLabel : '加工类型',
// labelWidth : 'auto',
// displayField : 'name',
// valueField : 'id',
// editable : false,
// store : Ext.create('Ext.data.Store', {
// fields : [ 'id', 'name' ],
// autoLoad : true,
// data : [ {
// id : 1,
// name : '新模'
// }, {
// id : 2,
// name : '修模&设变'
// }, {
// id : 3,
// name : '零件'
// }, {
// id : 4,
// name : '治具&量产'
// } ]
// }),
// listeners : {
// select : function(combo, record) {
// Ext.getStore('mpg-work-load-store').load({
// params : {
// stepid : "'02','25','24','26','05'",
// kindid : combo.getValue()
// }
// });
// }
// }
// } ],
// store : new Ext.data.Store({
// id : 'mpg-work-load-store',
// fields : [ 'id', 'craftname', 'craftcode', 'nwlid', 'usehour' ],
// proxy : {
// type : 'ajax',
// url : "public/getStandardWorkLoad",
// reader : {
// type : 'json'
// }
// },
// autoLoad : true
// }),
// columns : [ {
// header : '工艺名称',
// dataIndex : 'craftname',
// renderer : function(val) {
// return (val ? '<b>' + val + '</b>' : val);
// }
// }, {
// header : '每天负荷',
// dataIndex : 'usehour',
// editor : {
// allowBlank : true
// }
// } ],
// border : false,
// region : 'center',
// columnLines : true,
// forceFit : true,
// plugins : [ Ext.create('Ext.grid.plugin.CellEditing', {
// clicksToEdit : 1
// }) ]
// }) ]
// });
//
// me.callParent(arguments);
// }
//
// });
